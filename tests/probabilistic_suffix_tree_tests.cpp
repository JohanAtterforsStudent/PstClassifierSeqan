#include <gtest/gtest.h>

#include "../src/kl_tree.hpp"
#include "../src/probabilistic_suffix_tree.hpp"
#include "../src/ps_tree.hpp"

#include <array>
#include <filesystem>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include <seqan3/alphabet/nucleotide/dna4.hpp>
#include <seqan3/alphabet/nucleotide/dna5.hpp>
#include <seqan3/core/debug_stream.hpp>
#include <seqan3/io/sequence_file/input.hpp>
#include <seqan3/range/container/bitcompressed_vector.hpp>
#include <seqan3/range/views/to.hpp>
#include <seqan3/range/views/to_char.hpp>

class ProbabilisticSuffixTreeTest : public ::testing::Test {
protected:
  void SetUp() override {
    using seqan3::operator""_dna4;
    using seqan3::operator""_dna5;
    sequence = lst::details::sequence_t<seqan3::dna4>{"GATTATA"_dna4};
    probabilisticSuffixTree = pst::ProbabilisticSuffixTree<seqan3::dna4>{
        "TEST", sequence, 3, 1, 192, "parameters", false, 2};
    probabilisticSuffixTree.construct_tree();

    probabilisticSuffixTreeParallel =
        pst::ProbabilisticSuffixTree<seqan3::dna4>{
            "TEST", sequence, 3, 1, 192, "parameters", true, 2};
    probabilisticSuffixTreeParallel.construct_tree();

    long_sequence = lst::details::sequence_t<seqan3::dna5>{
        "CGCGCGGCGCGTCGTCGAGCTCGCCGCCCAGGGCGCGCCCCTCGGCGCGATCCGCGCCGCCCTCAACGACGTGACCCCCGCCGCCGACAAGGGCGAAGCCTTCGTCGGACGCCCCGACTGGCTGGGCGAGCTGTGGACCGCGCGCCGCACGGACCGGCCCCTGATCGACTCGATCACCAAAAAGGCCCTGCCCCGTGCGACCAAGGTCAAGGGCTGGCGCTGGAAGAAGCGCCCCGAGGTCGCCGACTACACGGGCAACAAAACCGAAATCTCCTCCAACGAGATCGAGACCGAGCCCGTCGAGGCCGCCGTCAAACGCATCGCCGCAGGGTGGGACACCGACCGCATTTTCGTCGACCTCGGCGACGGCGACATGATCGAGAGCCTGTGGGAGGGCGCCCGCGAGGACTACGCGATCAAGACCGAGGCCGCCGTCACCACCGGCCTCAAGACCGCAGCGACGAAGCTCACCGGCGCGCCCACCGAACTGGACAAGGCCCTCGTGGTCCTCGGCTCCAAGGCCGCCGCCATCGGCTCCCGCCTGAACTTCGTCGCCTTCGGCGCCGACGTGTGGAGCAAGTTCACCGCGCTGACCCGCGACCAGGTGCCGTGGTGGATCACCAACGGCGACCGCCTCAACCTCTCGACCGCGACCGGCGAGGTCAACGGCCTGCGCCTGTTCGTGGACCCGACCCTCGCGGCGGGCGACATCCTCGCGGGCGACACCCGGTCCGCGACGTTCTACGAGGAGCCGACCCCCATCAGGGTCAACGCCATCGACCTGCCCAAGGGCGGCGTGGACCTCGGCCTGTTCGGGTACCACGCCCTTCTCGTGAACGACCCGAACTCGTTGTTCATCATCACGGCGGGCTGACCCCATGACCCCCGACGACCTCGCCACGCGGGCCGCCGCGTGGGCGAAGCTCCCGGGCGGCGTGGACGACGCCATGAGGGCGTGCGCAGCCGCAGTGCACGCCCTCGTGGCCGCCCTGCCCGTCACGCAGGGCCGCCCCGCCTGGCGCGAGGACACGGCCCTCGGAGCGGTCATGCTCACCGCCCGCCTGCACCGCCGCCGCAACAGCCCGGCGGGCATCGAGTCCCTGACCGAGATGGGCGCGACCTACGTGAGCCGCTACGACAGCGACATCGCGCGCCTGCTGCGCATCGACGCCTTCGTCGGGCCCGTCGCCATCTGAGGGGGGCCACGAGATGAACCCGCTCTACGCGGCCGCCCAGGATGTGGCCGACATGCTCGCCGCGGCCGGAGTCCACACGGTCACCGACCCCAGGGACATCGAGCCGCCGTGCGCGTGGGTCAGCCCCAGCCGCATCGCCTACCCCACGCTCGCTGGCCGCCCCCGCACCGTCGAGTGGGAGGTGTACCTCATCGCACCCGACAGCGGCGCGCCCCTCTTCCCCCTCGGCGACCTCATCGACCGGGCCGCCACCGTCTTCCCCGGCATCGAGGCCCGCACCCTCGGCCTGACAATCCCCAACCTCAGCCCGGACCCCCTGCCCGCGATCACGTTCACCATCGAAACAGAAACGGACTAAACCCATGGCAGTGAAAACCCTCACCCTCGGCCCCGGCAAACTCAGCTTCGGCGCCCCCGAGTCCCTGACCCACGCCGCCGCCCAGGTCACCAAATGCGCCGTCAAGCCCACCGCGAAGCAGGGCGACTCCGTGGCCGTCCTGTCCGGCGACCGCGTGCCCGGCGACCGCACCGAAGCCGCGACCCTGGAGTTCACGATCTACCAGGACTTCGGCGAGGCCGAATCCTTCGTCGAATGGACCTGGGCCAACGCAGGGAAGGAACTCCCCTTCGAGTTCATCCCCGCCGACAAGCACGACAAGGCCGTGCGCGGCCGCGTCACGATCGAGCGGTCCGACATCGGCGGCGAGGTCGGCGTCAAGGTCACCGCCGACCTGGAGTTCACCTGCACCACCATGCCCACCATCGAGCCCAAAACCAAGATCGGGCACTGAGGTGGCCGACTACTCCGGCGTCAAGATCGACGGCGCGCGCCGCCTCCGCTCGACCCTGCGCAAAGCGGGCGCGGACATGCGCGACATGCGGGAGGTGAACCGCGTCGTCGCCGGCATCGTCGTCGGCGCGGCCACCGCCCGCGTCCCCCGACGCACCGGGGCCCTGGCCGCCACCGTGCGCGCAGGGGCCACCCAGGCCGCAGCCATCGGCCGCGCCGGGAACAACCGCCGCACCGGCGTCCCCTACGCCAACCCCATCCACTGGGGATGGCACCGCCACCGAATCCGCCCTAACCCGTTCCTCAGCCTCGCCGCCCAGGACACCGAACCCCAGTGGTTCGGCGTCTACGCCGACCGCATCGAACGCCTCATCAACAGCATCGAAGGAGCCTGACCCATGTCGAGCATCAAAGCCATCAACGTCGAGGTAGTCACCTCCGCCGTGACCGGCGACCTCGCCGCCGTCACCGTCCGCACCGACAACCGCGACCGCATCGCCTGGGACCTCGCGAGGGGCCGCAACAAATGGCCCCAAGCACAGGAGGCCCCCAGCCTGTGGGCCACCCACATCGCCTACACCGCGCTCCGCCGCACCGGCGAAGTCAGCTGCTCGTTCGAGGAGTTCTCCGAGGCAACTGTGAGCGCCGAACCCGAGGTCATCGACGTGGACCCTACCCGGACGGCGACCGCCGGGGCCTGATCGTCGCCCTGGCCCTCGCCACCCGCATCCCCATGAGCGAGTGGGAGACCCGCCCCGACGAGGACATCGCCACCGCACTGCAACTGCTAGAAGAGAGGAGGAGCTGACTTGGCGTCGAAAACCGCCATCCTGAGCGTCCGCGTCGTCTCCGACGTGAAGGACGCCACCAAGGGACTGGACGACGTGGCCGACAAGACCGGCCGCCTGGAGGACGGCCTCAAACGGGCCGCCGCCCCCGCCGGGATCGCCGTCGCCGCCCTCGCCGGGATCGGCAAGGCCGCCACCGACTCCGCCAGCGAGTTGCAGCAGAGCGCGGGCGCCGTCGAATCCGTATTCGGCGGGCACGCCGCCGCCGTCCAGGACGCCGCCAAGACCGCCGCCTCCAGCGTCGGCCTGGCAGCAAGCGAGTACCAGAACATGAGCGCGGTCCTGGGCGCCCAGCTCAAGAACATGGGCACCCCCATGGAGGACCTGGCCGGATCGACCCAGAACCTCATAGGCCTGGGCTCCGACCTCGCCGCCACCTTCGGGGGAACCACCGCCGACGCCGTGAGCGCCATCTCAGCCCTCCTCCGGGGCGAGCGCGACCCCATCGAGCGCTACGGCGTCTCGATCAAACAGTCGGATATCAACGCGCGTCTGGCCGCCGAGGGCATGGACAAGCTGGAAGGCGCGGCCAAGACCCAGGCCGAAGCCCAGGCCGCCCTCGCCCTGCTCACCGAGCAGACCGCATCTGCGCAAGGCCAGTTCGCGCGCGAGACCGACACGATGGCCGGGAGCCAGCAGATCGCCGCCGCCCAGTTCGAGAACGCAAAAGCCGCCCTCGGGGAGAAGCTGCTGCCCGTCGTCACGCAGTTCATGGAGGCCATGAGCGGGGCGGCTCAATGGGTCGCCCAGAACAGCGATGCGCTGCTCGTCCTCGGCGGCGTCGTCGGAACCATCGCGGGCGTGATCCTCGCCGCCAACGCCGCCATGGGCGTGTGGACCGCAGTCCAGACGACCGCCAGAGTCGCGACGGCCGCCTGGACCGGCGTCCAGGCCGCGTTCAACGCGGTCATGGCCCTGAACCCGATCACACTGGTGGTCATCGCCATCGGGGCCCTGGTCGCCGCCGTCGTCGTCGCCTACAACAAGTCCGAGGCGTTCCGCAACGCTGTATCCGCGCTGTGGGACGCCATCAAAGCGGGGGGCGGCTGGATAGTCGATCACGTCATCAAACCCATCGGAGACGCTTTCAACGCCGTTGTTGATGCCGTGAAATCCGTCTACGACTGGGTGAAGAACCTGTTCAGCGGATTCCAGCTCCCAGGCTGGCTATCGAGCGTACTCAGCTGGTTCGGGCTCGAAGCCCCCTCCGGCCCCGAATCCGGGGCCATCCTCGCCGCCACCGGGACAACGGACGCCCCCCTCGCGCGCCTCGCATCGTGGGCGCTCGCCCCCCGCACCGGCTCCAGCCCCACCCCCGCCGGCAGCGTCGTGAACATCACTGTGAACGGCGCCCTGGACCCTGACGCGGTGGCCCGCCAGATCGGCCGCATCCTGTCGCGCCGCGACCTCATCAACGGCACCGAGCAGATCGTGGGGGCGACCCTATGAGCGTCAGCGCAAGCCTCCGCGTCGCCGCAGGCGGCCTCGGCGGTGTCATCAACGCCGCCGCCGACAAGTACCCGACGACGGTGACCGTCCTCGACGACCTCACCGTCACGTGGGGCCGCGATAGCGTGGTCTCACACCCGGACCCGTCGTCAATGACCGCGACAATCGCCCTCGTGGACACTGTGCCCGACTGGCTGCGCGTCGGCGCGCTGGCGACCGTCAACGCGGTCGCCCGGACCGAGGAGTCCCAGCGGTCCTATATGCGGCTCCTGCCCTGGCGCGCCATCGAACCGGGCACCGGGTGGCGCCAGCAGGTCACCCCCGATCCGCCCGGCGCGTGGGTCGGGAGCCTCCCGGTGTTCGCCGCCGCCGGAGCAGACTCCGGGATCGGATGGTTCATAGCGCCAGGGGTGCAGCCCCCCTCCGATACCCCCGAGACCACCCAGTGGGCCGCGAACGCAAAGACGACAGCGGGCAAGCCAGTCACGTTCACAATCACCGTCCCCGAGCTCACCGGCGCGACCGTGCGCGCCTTCCCGCTCACTTACCGGCGCCCCGGCGGGCTCTACACCCGCGCCCCCGGCATGGCGATCGAGCTCTCCCCGGAGAAGTACACGCCGGGCACTGTCGAGTACTCGGGCACCTGGACCCCCGAGGCGACGGGCCTTTACGTCGGCGCCTATCTGCATATCCAGCTGCACAAGGCCCCGGCCTGGACGACGATCCCCCGCGAGCGGACCTGGCGGGCCGCACCCGGCACGTGGGCGGACGCCGGCGGCCGCGCAACCGTCACTGACGTTCACATCGCCGGGACCTCCGGCCACGTCGCTGAGCACGCCGTCGAGGTCTTCACCGGCCGGGTCCAGTCCCTCCGCGTCGAATGGTCCGAGCGCCTGTCCCGACCCATCGCGCGGATCACCGCAGTGGACAAGCTCGCCGATCTGAATGGTACCTACATCGGCGACACGCCGTGGGGCGAGGAATCCTGGAAGCTGCGCGCAGAACGCATCCTGAAACAGGCCCTCGGACCAGCAGACACACTGGAGGGCGAACCCGGCAATTGGCTGGGGACGATCCGCCCCCGAGACGTGGACCACCGCAGCGCCGGTGAGCTCATGAGGAACACACTCGCCTCGTGCGCCGCCACCGCATTCCCCGTCAGCTGGCGCAAATGGCGGGTAATCCCATTCATCTACAAGGGGAGCGATCAATCAATCACGATCCCCGGGCGCGCCATCCGCCGCGACGGCGTACAGGTCAGCACTGACGAATCCGCGAACATCTCGACAATTCAAGCCACGTATTTCGATGTGACCTACGACGGGAAAACCGGGAGGGTGAAAGACGTTATAGAGCGCACGACTACGCGGAAGAATACACCGGCAAATGAGGGACCCCCCAGGTCCATCAAAATGAAAACCGAACTATCCCGCAGTAACGAAGCGAGCGAACTCACCCGGATCATCGGGAAATACGTGAACGTGAACCAGTGGATCATCAGCGCCCTATCAGTGAAGCACGACCGGATCAGCGAGGACGCCCTTGTGCGCCTACTGTCCGCCACCGAGCGCATCGCCCAGCAGGTCGTCCTCACCGGCCTCCCACGATGGTTCCCAGCAGCGACGATGCGCGGCATCGTCATCGGCGGGTCCCTCACCATGCACCGCGGCCACTGGACCCCCACCCTCCGCATCGCAAACACACCCGACTAGAAAGAGTACCCATGCCATCGACAACCCCCCGGGGTCTTCCCTACGCAATCCCCACCGACGCCCAAGCCGCATTCCCCGACGCCGTGTCAAAACCCATCGCCGAATGGATCGAGGCGAACCTCCCGGTCATGCAAGCCGGGACCATCGCCTACCCCGCCCTCGGCTCCCAAGACCAGACGGGAGAGTACACAGTCACGTTTCCCAAACCCTTCCCAGTCACGCCCCGGATATTCATGCAAGCCGATAACCAGCGCCTCACAATCGCCGTATGGAATATCAGCCGCACCGGGTTCAAATGGATGGCCCGCAACAACAGCAACGGCAATTCGTCCTCTGGAGCGGCCTCGTGGTTCGCCGTTAGCGGCGCCACCGGACAGTAACGAAAGGAAACAAAGGAAATGACCACAGCGGTCGACGTGTTCACCGCCCGCCTCGCCTGGATGATGACCCAAGCCGACGGCGGCTACTCCCAGCCCAACCGCCTCGACGTGCGCCGCACGCGCGGCGTGTGGGACCCCGGCTTCCAGTTCGAGGGGGACTGCTCCTCCTGCGTCCTGGAGGCCGCCCACCAGGCGGGCCTGCCCACAGGCTCTGCGTCCTACACGGGCGACATGCGCGCGGGTCTGGAGGCCGTGGGATGGGCCGTCATCCCCTACGCCGCGACCGGCGGGGACCTTGACAACCTCGCCGACGGCGACGTGCTCCTATCCGAGGCCGCGAGCGGCGGCGTCGGCCATACCGGCGGCCTCATCCCCGGCGGCCTCGTCGCCGAGGCGTGGATCGACGGTCACGGAGACATCATGGGCTCCGCAGGCGGGGACGGGCCCGGCGACGACACCGGCGGGGAAACCCGCGCAGTGCCGTTCTATTCCCACCCCTACACAGTGCGGGGGCTCTGGACGCACGTCCTGCGCCCCCCAGCCCTCGACGCCGCAGACTCGCCCGCCGAACCCACCCCCACAACGAAAGGAATCCCCAATATGTTCGGAATCACCTACACGGCAAACGCCTTCGGCGGTATCACCGCCTACGTCCTCATCCACGAGTCCGCCGGTGCCGACGCCCTTGACCGCGTTCAGGCCCAGGTGTACAACAGCGTCCTTCCCAACGGCTTCACCGAGGTCCCTGAGCACCACGCCGAAATGCTCATCCGCGAGTCGTGGGTGCGCCACAACCGCATCGCCAACGCCGTCGCCGCGACCACTCGCGTAGACATCAACGAGGCCACCGCCCGCGTTCTCGCCGCCGTCAAGGAAGGAGCTGCCAAGTGAACGCCATCACGTCCCAGACCCCCGATGATCCCACGCCGCAGCCCATCTCCTGGCTTACACCCGCAGTGCGGCGTTACATCTACAACGTCACTATCGCCGCCCTCGGCGTCGCTCTCGTCTACGGCGTCGTCGATGGCCAGCACGCCGCCGCCTGGGAGGCCCTGGCCCTCGCTGTCGTGGGCCTCGCCCGCGCGCACGTCCCCGGAGACCCCCAATGAGCGACGCCTCGGCGGCCGTCGAGGTCATCGCCGCCATAGGCGGCCTCGGCGGCCTCGGGGCCGCGCTCTCAGCCGTCGCCTCCCTCATGGAGGCCCGCAGGGTCCGCGCCAGTATCCCCGCCGCCGCCGACCGCACCGAGGAGGCCATCGACGCCCTGCGCTCCGATGTCCGCGCCATCGACCGCCGCATCGGACACGAGCTCGGCGAAATCCGCCGAGCCGCCGACCGGGAACACGCCGACTATGACGCACGTCTCAGACGATTGGAGGGGTCATGAGTTGACACTCCCACTCAGGTGGTTATAAACTATAACCATCAGGAAGCCATAAGGGGCAAGCCTGAAACCTGAAGGGAGCGCGAAAATGCGCAAGTCAATCGAACTCACCTGGACCCCCGAAACCCGCGTTTGGGGCACAAGTGGGAACACCAGCGTGGCCGTCGGCACCGGAACCCTGGACGGCCGCCGCCTCGCCGTCTACGCCTTCCCCCAGTCCGATCACTGGTCGTTCTGGTCGCAAATCGAGCGTCCCGGCGGTGGTTCGACCTCGATAGAAATCAGGTCCACATTGCCCGCAGGCACCGTTCCATCGGTCCTCGGCCCGAACGGCGCCATCCGCGAAACGACGACAATCGAACTCTGACCCAACGCCCCGGCGCACACGCGCCGGGGCACTGTCACGGAAGGGCAAAGGATGAACGGCATCGAACTGCGCGCCCGCCGCGAAGCACTCGGGCTCTCACAAACCAAGTTCGCGAAAATGTGCGAAACGACTCAAGTGACCGTTTCCCGCTGGGAGAACGGCACCCGCGAACCAAGGAACGACATTGCAATACACCTGCTGATGGCAAATATCGAAGACGCCGCTATCGACCTCATCGAGGACCTGCTAGAGCTCGCCGAAGACGAAGAACTCCTAACAGCAACGCCCGACCTCCAGCTCACGGTGTACAACGACGAAGCCCGCTACGCCGCCGGGGAGCCCGTCTGGTCAAAACGCCTCCCCATGGAGACGCACCGCGTGTGCGCCGCCCGAGCCGCCGCCCTCCTCGGCGCCGAGGACGGCACACACGTCACACTCATCGAGGGCTGAGCGCCCTCACGCGATAGCCTCAACGACCTCGCGCACATCATCGTCGGGAACGAGGATGTAGCGAAGCGTCGTCGAGGGTGAAGCGTGCCCGAGCGCGCGCTGCACCGCGACGAGGTTCCTCGTGCGCGCGAACCCCGTCGAGGCGAAGGCGTGCCGGAGGGCGTGCATCGTCACGCCCTCCGGCAGCGCCCGGCCGACCAGCTTCCCCACCCACGCCGGGGAGAGGTGTCCATGGTCCGCCCCCGGGAAGAAGAACCCCGGGTCATGATCGAGCAGCTCATCGGCGAGAGAATGCGGGAGGGGGATCACGCGGGTTTTCCCGCCCTTTCCGTGGACCACGAGGGACCAGCCCGCCAGATCGCGCACAAGATCGCGCGTGTGCGCGCGGGCGACCTCACCCCGCCGCATCCCCAACTCCGCCGCCATGCGCACCATGAGACGCACTCGTGGATCCGTCGCCCGGCGCCCCACCGCGATGGCGCCCGGCGTCGCCGGCCTCGGCGCAGGGTCCGACTGTCTCACCGACGGCACCGGCGGCGCTACCTCGATGTATCCGACCCCCTGGGCCCACCGGTAGAACTGGTCGACGCTTTGATGCGCGCTCCGACGCGTATCCCGCGCCCAATCATGCGCCCCGGACCACTCGATCACCGTGAGCGGCCCAACCTCCCACGGGCCCGCCCGCAGATCGCGGGCGAACCTACTCACCCACTCGATCCGCAGTCGGATAGTCTCGGCCCGCCGGCCGGCCGCCGCCAGCGCTGTAGTCCACTCGCCTATAGGACCGGCCCATCCGGCGGGTACCGGTCGCGGTTTCATGCTCATGATGATTACCCTGCATCTATTCGGCCCCAGTGTCGCGTCATCACGCCGCCGGGACCCACGATGTAGGATCGAGCCGTGGGCCACCAATCCGTAGGTTGGGGGTTCGAGTCCCCCTGGGCCTACTCGCCCGCCCCAGCCCCGCCGGCTGGGGCGGTTGCCGCACTGCGCCGGTACCGACGCGCTGCCGACGGATGGAGGTCGCCATGTCCGACGACGCGGACAGGGCCCACGGCGCCCTGGCGGGACTCGCGCTGGGGGACGCCCTTGGCATGCCGACCCAGGCGATGACCGCCGATCAGATCAGGCTGACCTACGGGTGGGTGGACGCCCTGGTGCCAGCCGACGCCTCGCAGCCCTACGCGCCCGGCATGCCCGCCGGCAGCGTCACGGACGACACGGAGCAGGCGCTGCTCGTCGCCGGCCTGCTGGTATCGGGCGGGGGCGGCATCGACCCCCACGCCTTCTCCCGCGCCCTGCTGGACTGGGAGGACTCGATGGCGGCCCGCGGTTCCCTCGACCTGCTGGGCCCATCGACGAAGGCCGCCCTGGAACGCGTGCGGGCCGGGGAGGACCCCCTCCGCGTGGGCGGCGCGGGCACCACCAACGGCTCAGCGATGCGAGTCGCGCCCGTCGGGATCGCCTCCTCCACCCGGGATCCGCGTTTCGCCGACACCGTGTGGGAGTCGTGCCGCGTCACCCACGCCACCGAACAGGGCTTCCACGCCGCCGCGCTCGTGGCGGCAGCGGTCTCCCTCGGCATCGACGGAGCAGGGGCGGACAGCCCTTCGGACTCCGCCCGCGCCTCCTTGGAACGCGCCCTGGCCCTCGTGGAGGCACTCGGGCGCCGGGGGGCGCGGACGCCCCAGCCGGACGTGTGCGAGCGGACCCGCTACGCGCTGCGGTTCGCGCGCGCCCGCGACCCCGCCCCCGGTACTGCCGACGACGACCGGGCATTCGCCGGGGCACTGCGGGCACGCGTCGGCGCCTCCGTGGAGGCCGCCCAGTCCGTCCCCGCAGCATTCGCCATCGCCTGGCGCTACGCCGCCGATCCGTGGCGGGGCCTGTGCGTCGCCGCCAACCTCGGCGGTGACACCGACACGATCGGCGCTATCACCGGCGCCGTGCTCGGCGCCGCCCTGGGGGCCCGGTGCTGGCCCGCCCAGGAGCTGGAACGAGTGGAGGCCGTCTCCGGGCTGCGGCTGCGCGAGACCGCCGACGGTTTGCTCCGCCTGCGCGCCCACGGATCCCGACTGCCCGCCCACGGGGAGCCGGTCGCAGCACCGCAGGAGGGCAGGGTCGTCCTGCTCGGGCAGGTGGTCGTCGACCTCGCACTGCTGGCGCCGCGCGTGCCCGCTCCCGGCGGCGACGTGTTCGCAGAGGACGCGGGCATGCACGCGGGCGGGGGCTTCAACGTGCTGGCCGCTGCGCGCCGGATGGGAGCGGAGGCAGTGAGCCTGTCCGGCGTCGGGGACGGCGGATTCGCCTCGATCATCACCGCTGCGTTGGAGCGCATCGGCGCCTCCTGCGAGGGACCGCGCGTCGCGGGAACGGACTCGGGGTACTGCGTGGCCATCACGGACGGCGACGGCGAGCGCACCTTCGTCTCGACCAGGGGCGCGGAGGCCCGCCTGCCGCGCGGGTCGTGGTCCGCCCACGCGGCCCGCTTGCGCAGCGGGGACGTGGTGCACGTGGACGGCTACGCGCTGGCCCATCCGGCCAACACCGCAGCGCTGCGGGAGTTCCTCTCGGCGCACCTGCCCGCAGGGCTCCGCGCGATCGTCGACGTGTCGCCCGTCGTCGGCGATGTGGACCTCGACGACCTGCTTGCCCTGCGGGCCCTGGCCCCCCTGTGGTCCATGAACGAGCGCGAGGCGGGGATCCTCGCGGGCCGCCTCGCGCGGGCGTCCGCCGCTCCCCCGCACGGAGGCGCTCCCCCGGGGGAGGCGACACCACCGGCCGGAGCGGCCCCCGGGA"_dna5};

    middle_sequence = lst::details::sequence_t<seqan3::dna5>{
        "CGCGCGGCGCGTCGTCGAGCTCGCCGCCCAGGGCGCGCCCCTCGGCGCGATCCGCGCCGCCCTCAACGACGTGACCCCCGCCG"_dna5};
  }

  lst::details::sequence_t<seqan3::dna4> sequence;
  lst::details::sequence_t<seqan3::dna5> middle_sequence;
  lst::details::sequence_t<seqan3::dna5> long_sequence;
  pst::ProbabilisticSuffixTree<seqan3::dna4> probabilisticSuffixTree;
  pst::ProbabilisticSuffixTree<seqan3::dna4> probabilisticSuffixTreeParallel;
};

TEST_F(ProbabilisticSuffixTreeTest, ConstructorTable) {

  std::vector<int> expected_table{
      0, 2,  // root
      1, 10, // A
      0, 14, // G
      2, 18, // T
      7, 0,  // -
      2, 22, // AT
      7, 0,  // A-
      1, 16, // GA
      2, 0,  // GATTATA-
      4, 26, // TA
      3, 30, // TT
      6, 0,  // ATA
      3, 0,  // ATTATA
      5, 0,  // TATA
      7, 0,  // TA
      4, 0   // TTATA
  };

  EXPECT_EQ(probabilisticSuffixTree.table, expected_table);
}

TEST_F(ProbabilisticSuffixTreeTest, ConstructorStatus) {
  std::vector<pst::Status> expected_status{
      pst::Status::INCLUDED, // root
      pst::Status::INCLUDED, // A
      pst::Status::INCLUDED, // G
      pst::Status::INCLUDED, // T
      pst::Status::EXCLUDED, // -
      pst::Status::INCLUDED, // AT
      pst::Status::EXCLUDED, // A-
      pst::Status::INCLUDED, // GA
      pst::Status::EXCLUDED, // GATTATA-
      pst::Status::INCLUDED, // TA
      pst::Status::INCLUDED, // TT
      pst::Status::EXCLUDED, // ATA
      pst::Status::EXCLUDED, // ATTATA
      pst::Status::EXCLUDED, // TATA
      pst::Status::EXCLUDED, // TA
      pst::Status::EXCLUDED  // TTATA
  };

  probabilisticSuffixTree.print();

  EXPECT_EQ(probabilisticSuffixTree.status, expected_status);
}

TEST_F(ProbabilisticSuffixTreeTest, ConstructorSuffixLinks) {
  std::vector<int> expected_suffix_links{
      -1, // root
      0,  // A
      0,  // G
      0,  // T
      0,  // -
      6,  // AT
      8,  // A-
      2,  // GA
      24, // GATTATA-
      2,  // TA
      6,  // TT
      28, // ATA
      30, // ATTATA
      22, // TATA
      12, // TA
      26  // TTATA
  };

  EXPECT_EQ(probabilisticSuffixTree.suffix_links, expected_suffix_links);
}

TEST_F(ProbabilisticSuffixTreeTest, ConstructorProbabilities) {
  std::vector<std::array<float, seqan3::alphabet_size<seqan3::dna4>>>
      expected_probabilities{
          {4.0 / 11.0, 1.0 / 11.0, 2.0 / 11.0, 4.0 / 11.0}, // root
          {1.0 / 6.0, 1.0 / 6.0, 1.0 / 6.0, 3.0 / 6.0},     // A
          {2.0 / 5.0, 1.0 / 5.0, 1.0 / 5.0, 1.0 / 5.0},     // G
          {3.0 / 7.0, 1.0 / 7.0, 1.0 / 7.0, 2.0 / 7.0},     // T
          {0, 0, 0, 0},                                     // -
          {2.0 / 6.0, 1.0 / 6.0, 1.0 / 6.0, 2.0 / 6.0},     // AT
          {0, 0, 0, 0},                                     // A-
          {1.0 / 5.0, 1.0 / 5.0, 1.0 / 5.0, 2.0 / 5.0},     // GA
          {0, 0, 0, 0},                                     // GATTATA-
          {1.0 / 5.0, 1.0 / 5.0, 1.0 / 5.0, 2.0 / 5.0},     // TA
          {2.0 / 5.0, 1.0 / 5.0, 1.0 / 5.0, 1.0 / 5.0},     // TT
          {0, 0, 0, 0},                                     // ATA
          {0, 0, 0, 0},                                     // ATTATA
          {0, 0, 0, 0},                                     // TATA
          {0, 0, 0, 0},                                     // TA
          {0, 0, 0, 0}                                      // TTATA
      };

  for (int i = 0; i < probabilisticSuffixTree.probabilities.size() &&
                  i < expected_probabilities.size();
       i++) {
    for (int j = 0; j < 4; j++) {
      EXPECT_FLOAT_EQ(probabilisticSuffixTree.probabilities[i][j],
                      expected_probabilities[i][j]);
    }
  }
}

TEST_F(ProbabilisticSuffixTreeTest, PrunedKL) {
  auto kl_tree = pst::KullbackLieblerTree<seqan3::dna4>{
      "TEST", sequence, 3, 2, 0.3, 192, "cutoff", false, 2};
  kl_tree.construct_tree();

  std::vector<pst::Status> expected_status{
      pst::Status::INCLUDED, // root
      pst::Status::INCLUDED, // A
      pst::Status::EXCLUDED, // G
      pst::Status::EXCLUDED, // T
      pst::Status::EXCLUDED, // -
      pst::Status::EXCLUDED, // AT
      pst::Status::EXCLUDED, // A-
      pst::Status::EXCLUDED, // GA
      pst::Status::EXCLUDED, // GATTATA-
      pst::Status::EXCLUDED, // TA
      pst::Status::EXCLUDED, // TT
      pst::Status::EXCLUDED, // ATA
      pst::Status::EXCLUDED, // ATTATA
      pst::Status::EXCLUDED, // TATA
      pst::Status::EXCLUDED, // TA
      pst::Status::EXCLUDED  // TTATA
  };

  EXPECT_EQ(kl_tree.status, expected_status);
}

TEST_F(ProbabilisticSuffixTreeTest, PrunedPS) {
  auto ps_tree = pst::PeresShieldsTree<seqan3::dna4>{"TEST", sequence, 3, 2};
  ps_tree.construct_tree();
  std::vector<pst::Status> expected_status{
      pst::Status::INCLUDED, // root
      pst::Status::INCLUDED, // A
      pst::Status::EXCLUDED, // G
      pst::Status::INCLUDED, // T
      pst::Status::EXCLUDED, // -
      pst::Status::EXCLUDED, // AT
      pst::Status::EXCLUDED, // A-
      pst::Status::EXCLUDED, // GA
      pst::Status::EXCLUDED, // GATTATA-
      pst::Status::EXCLUDED, // TA
      pst::Status::EXCLUDED, // TT
      pst::Status::EXCLUDED, // ATA
      pst::Status::EXCLUDED, // ATTATA
      pst::Status::EXCLUDED, // TATA
      pst::Status::EXCLUDED, // TA
      pst::Status::EXCLUDED  // TTATA
  };

  EXPECT_EQ(ps_tree.status, expected_status);
}

TEST_F(ProbabilisticSuffixTreeTest, PrunedParameters) {
  auto kl_tree = pst::KullbackLieblerTree<seqan3::dna4>{
      "TEST", sequence, 3, 2, 0.0, 6, "parameters", false, 2};
  kl_tree.construct_tree();
  std::vector<pst::Status> expected_status{
      pst::Status::INCLUDED, // root
      pst::Status::INCLUDED, // A
      pst::Status::EXCLUDED, // G
      pst::Status::EXCLUDED, // T
      pst::Status::EXCLUDED, // -
      pst::Status::EXCLUDED, // AT
      pst::Status::EXCLUDED, // A-
      pst::Status::EXCLUDED, // GA
      pst::Status::EXCLUDED, // GATTATA-
      pst::Status::EXCLUDED, // TA
      pst::Status::EXCLUDED, // TT
      pst::Status::EXCLUDED, // ATA
      pst::Status::EXCLUDED, // ATTATA
      pst::Status::EXCLUDED, // TATA
      pst::Status::EXCLUDED, // TA
      pst::Status::EXCLUDED  // TTATA
  };

  EXPECT_EQ(kl_tree.status, expected_status);
}

TEST_F(ProbabilisticSuffixTreeTest, Print) {
  auto pst_unpruned = pst::ProbabilisticSuffixTree<seqan3::dna4>{
      "TEST", sequence, 10, 1, 192, "parameters", false};
  pst_unpruned.construct_tree();
  pst_unpruned.print();
  seqan3::debug_stream << std::endl;

  probabilisticSuffixTree.print();
  seqan3::debug_stream << std::endl;

  auto pst_pruned = pst::KullbackLieblerTree<seqan3::dna4>{
      "TEST", sequence, 3, 2, 1.2, 0, "threshold", false, 2};
  pst_pruned.construct_tree();
  pst_pruned.print();
  seqan3::debug_stream << std::endl;
}

TEST_F(ProbabilisticSuffixTreeTest, PSPruning) {
  using seqan3::operator""_dna4;
  lst::details::sequence_t<seqan3::dna4> long_sequence{
      "AATAATAATAATAATAATAATAATCGCGCGCGCGCGCATATATAT"_dna4};
  auto pst_ps =
      pst::PeresShieldsTree<seqan3::dna4>{"TEST", long_sequence, 3, 2, true};
  pst_ps.construct_tree();
  pst_ps.print();
  seqan3::debug_stream << std::endl;
}

TEST_F(ProbabilisticSuffixTreeTest, MemoryAllocationException) {
  // Crashes when allocating memory in expand suffix links
  EXPECT_NO_FATAL_FAILURE({
    auto pst = pst::ProbabilisticSuffixTree<seqan3::dna5>(
        "TEST", long_sequence, 15, 4, 48, "parameters", false);
    pst.construct_tree();
  });
}

TEST_F(ProbabilisticSuffixTreeTest, CorrectNumberOfParameters) {
  size_t sought_n_parameters = 192;

  pst::ProbabilisticSuffixTree<seqan3::dna5> pst{
      "TEST", long_sequence, 15, 4, sought_n_parameters, "parameters", false};
  pst.construct_tree();

  int n_terminal = pst.count_terminal_nodes();
  EXPECT_EQ(n_terminal * 3, sought_n_parameters);
}

TEST_F(ProbabilisticSuffixTreeTest, PSTBreadthFirstIteration) {
  std::vector<int> visited{};

  probabilisticSuffixTree.pst_breadth_first_iteration(
      0, 0, [&](int index, int level) {
        visited.push_back(index);
        return true;
      });

  std::vector<int> expected_visited{0, 2, 4, 6, 14, 18, 10, 20};

  EXPECT_EQ(visited, expected_visited);
}

TEST_F(ProbabilisticSuffixTreeTest, PSTBreadthFirstIterationSubtree) {
  std::vector<int> visited{};

  probabilisticSuffixTree.pst_breadth_first_iteration(
      2, 1, [&](int index, int level) {
        visited.push_back(index);
        return true;
      });

  std::vector<int> expected_visited{2, 14, 18};

  EXPECT_EQ(visited, expected_visited);
}

void test_suffix_links(pst::ProbabilisticSuffixTree<seqan3::dna5> tree) {
  tree.construct_tree();

  std::map<int, std::string> labels{};

  tree.breadth_first_iteration_sequential(
      [&](int node_index, int lcp, int edge_lcp) -> bool {
        labels[node_index] = tree.node_label(node_index, lcp, edge_lcp);
        return true;
      });

  tree.pst_breadth_first_iteration([&](int node_index, int level) -> bool {
    if (node_index == 0) {
      return true;
    }
    auto label = labels[node_index];

    auto parent = tree.get_pst_parent(node_index);

    EXPECT_NE(parent, -1);

    auto parent_label = labels[parent];
    auto expected_parent_label = label.substr(1);

    EXPECT_EQ(expected_parent_label, parent_label);

    return true;
  });
}

TEST_F(ProbabilisticSuffixTreeTest, SuffixLinksCorrect) {
  size_t sought_n_parameters{30300};

  for (int i = 0; i < 1000; i++) {
    pst::ProbabilisticSuffixTree<seqan3::dna5> tree{
        "TEST", long_sequence, 15, 4, sought_n_parameters, "parameters", false};
    test_suffix_links(tree);
  }
}

TEST_F(ProbabilisticSuffixTreeTest, SuffixLinksCorrectParallel) {
  size_t sought_n_parameters{30300};

  // If it succeeds 1000 times, we have no race conditions?
  for (int i = 0; i < 1000; i++) {
    pst::ProbabilisticSuffixTree<seqan3::dna5> tree{
        "TEST",       long_sequence, 15, 4, sought_n_parameters,
        "parameters", true,          1};
    test_suffix_links(tree);
  }
}

struct my_traits : seqan3::sequence_file_input_default_traits_dna {
  template <typename alph>
  using sequence_container =
      std::vector<alph>; // must be defined as a template!
};
void test_benchmark(std::string filename, bool parallel, int parallel_depth) {
  pst::time_measurement = true;
  lst::lst_time_measurement = true;

  seqan3::sequence_file_input<my_traits> file_in{filename};
  std::vector<lst::details::sequence_t<seqan3::dna5>> sequences{};
  std::vector<std::string> ids{};

  for (auto &[seq, id, qual] : file_in) {
    sequences.push_back(
        lst::details::sequence_t<seqan3::dna5>{std::move(seq)});
    ids.push_back(id);
  }

  size_t max_depth = 15;
  size_t min_count = 100;
  float threshold = 1.2;

  pst::KullbackLieblerTree<seqan3::dna5> pst{
      ids[0],    sequences[0], max_depth,     min_count,
      threshold, parallel,     parallel_depth};
  EXPECT_NO_FATAL_FAILURE(pst.construct_tree());
}

TEST(ProbabilisticSuffixTreeLiveTest, HumanHerpesvirus5) {
  seqan3::debug_stream << std::filesystem::current_path() << std::endl;
  std::string filename{"../../fasta/NC_006273.2.fa"};
  test_benchmark(filename, true, 1);
}

TEST(ProbabilisticSuffixTreeLiveTest, SaccharomycesCerevisiae) {
  seqan3::debug_stream << std::filesystem::current_path() << std::endl;
  std::string filename{"../../fasta/CM010781.1.fa"};
  test_benchmark(filename, true, 1);
}

TEST(ProbabilisticSuffixTreeLiveTest, EColi) {
  seqan3::debug_stream << std::filesystem::current_path() << std::endl;
  std::string filename{"../../fasta/CP007136.1.fa"};
  test_benchmark(filename, true, 1);
}